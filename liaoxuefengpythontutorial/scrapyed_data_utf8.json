{"title": ["列表生成式"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431779637539089fd627094a43a8a7c77e6102e3a811000", "desc": ["\n        ", "列表生成式即List Comprehensions，是Python内置的非常简单却强大的可以用来创建list的生成式。", "\n", "举个例子，要生成list ", "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "可以用", "list(range(1, 11))", "：", "\n", ">>> list(range(1, 11))\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n", "但如果要生成", "[1x1, 2x2, 3x3, ..., 10x10]", "怎么做？方法一是循环：", "\n", ">>> L = []\n>>> for x in range(1, 11):\n...    L.append(x * x)\n...\n>>> L\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n", "但是循环太繁琐，而列表生成式则可以用一行语句代替循环生成上面的list：", "\n", ">>> [x * x for x in range(1, 11)]\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n", "写列表生成式时，把要生成的元素", "x * x", "放到前面，后面跟", "for", "循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。", "\n", "for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：", "\n", ">>> [x * x for x in range(1, 11) if x % 2 == 0]\n[4, 16, 36, 64, 100]\n", "还可以使用两层循环，可以生成全排列：", "\n", ">>> [m + n for m in 'ABC' for n in 'XYZ']\n['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']\n", "三层和三层以上的循环就很少用到了。", "\n", "运用列表生成式，可以写出非常简洁的代码。例如，列出当前目录下的所有文件和目录名，可以通过一行代码实现：", "\n", ">>> import os # 导入os模块，模块的概念后面讲到\n>>> [d for d in os.listdir('.')] # os.listdir可以列出文件和目录\n['.emacs.d', '.ssh', '.Trash', 'Adlm', 'Applications', 'Desktop', 'Documents', 'Downloads', 'Library', 'Movies', 'Music', 'Pictures', 'Public', 'VirtualBox VMs', 'Workspace', 'XCode']\n", "for", "循环其实可以同时使用两个甚至多个变量，比如", "dict", "的", "items()", "可以同时迭代key和value：", "\n", ">>> d = {'x': 'A', 'y': 'B', 'z': 'C' }\n>>> for k, v in d.items():\n...     print(k, '=', v)\n...\ny = B\nx = A\nz = C\n", "因此，列表生成式也可以使用两个变量来生成list：", "\n", ">>> d = {'x': 'A', 'y': 'B', 'z': 'C' }\n>>> [k + '=' + v for k, v in d.items()]\n['y=B', 'x=A', 'z=C']\n", "最后把一个list中所有的字符串变成小写：", "\n", ">>> L = ['Hello', 'World', 'IBM', 'Apple']\n>>> [s.lower() for s in L]\n['hello', 'world', 'ibm', 'apple']\n", "练习", "\n", "如果list中既包含字符串，又包含整数，由于非字符串类型没有", "lower()", "方法，所以列表生成式会报错：", "\n", ">>> L = ['Hello', 'World', 18, 'Apple', None]\n>>> [s.lower() for s in L]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 1, in <listcomp>\nAttributeError: 'int' object has no attribute 'lower'\n", "使用内建的", "isinstance", "函数可以判断一个变量是不是字符串：", "\n", ">>> x = 'abc'\n>>> y = 123\n>>> isinstance(x, str)\nTrue\n>>> isinstance(y, str)\nFalse\n", "请修改列表生成式，通过添加", "if", "语句保证列表生成式能正确地执行：", "\n", "\n# -*- coding: utf-8 -*-\n\nL1 = ['Hello', 'World', 18, 'Apple', None]\n----\nL2 = ???\n----\n# 期待输出: ['hello', 'world', 'apple']\nprint(L2)\n", "\n\n", "小结", "\n", "运用列表生成式，可以快速生成list，可以通过一个list推导出另一个list，而代码却十分简洁。", "\n", "参考源码", "\n", "do_listcompr.py", "\n\n    "]}
{"title": ["迭代"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317793224211f408912d9c04f2eac4d2af0d5d3d7b2000", "desc": ["\n        ", "如果给定一个list或tuple，我们可以通过", "for", "循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）。", "\n", "在Python中，迭代是通过", "for ... in", "来完成的，而很多语言比如C或者Java，迭代list是通过下标完成的，比如Java代码：", "\n", "for (i=0; i<list.length; i++) {\n    n = list[i];\n}\n", "可以看出，Python的", "for", "循环抽象程度要高于Java的", "for", "循环，因为Python的", "for", "循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上。", "\n", "list这种数据类型虽然有下标，但很多其他数据类型是没有下标的，但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：", "\n", ">>> d = {'a': 1, 'b': 2, 'c': 3}\n>>> for key in d:\n...     print(key)\n...\na\nc\nb\n", "因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。", "\n", "默认情况下，dict迭代的是key。如果要迭代value，可以用", "for value in d.values()", "，如果要同时迭代key和value，可以用", "for k, v in d.items()", "。", "\n", "由于字符串也是可迭代对象，因此，也可以作用于", "for", "循环：", "\n", ">>> for ch in 'ABC':\n...     print(ch)\n...\nA\nB\nC\n", "所以，当我们使用", "for", "循环时，只要作用于一个可迭代对象，", "for", "循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。", "\n", "那么，如何判断一个对象是可迭代对象呢？方法是通过collections模块的Iterable类型判断：", "\n", ">>> from collections import Iterable\n>>> isinstance('abc', Iterable) # str是否可迭代\nTrue\n>>> isinstance([1,2,3], Iterable) # list是否可迭代\nTrue\n>>> isinstance(123, Iterable) # 整数是否可迭代\nFalse\n", "最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？Python内置的", "enumerate", "函数可以把一个list变成索引-元素对，这样就可以在", "for", "循环中同时迭代索引和元素本身：", "\n", ">>> for i, value in enumerate(['A', 'B', 'C']):\n...     print(i, value)\n...\n0 A\n1 B\n2 C\n", "上面的", "for", "循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：", "\n", ">>> for x, y in [(1, 1), (2, 4), (3, 9)]:\n...     print(x, y)\n...\n1 1\n2 4\n3 9\n", "小结", "\n", "任何可迭代对象都可以作用于", "for", "循环，包括我们自定义的数据类型，只要符合迭代条件，就可以使用", "for", "循环。", "\n", "参考源码", "\n", "do_iter.py", "\n\n    "]}
{"title": ["切片"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431756919644a792ee4ead724ef7afab3f7f771b04f5000", "desc": ["\n        ", "取一个list或tuple的部分元素是非常常见的操作。比如，一个list如下：", "\n", ">>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']\n", "取前3个元素，应该怎么做？", "\n", "笨办法：", "\n", ">>> [L[0], L[1], L[2]]\n['Michael', 'Sarah', 'Tracy']\n", "之所以是笨办法是因为扩展一下，取前N个元素就没辙了。", "\n", "取前N个元素，也就是索引为0-(N-1)的元素，可以用循环：", "\n", ">>> r = []\n>>> n = 3\n>>> for i in range(n):\n...     r.append(L[i])\n... \n>>> r\n['Michael', 'Sarah', 'Tracy']\n", "对这种经常取指定索引范围的操作，用循环十分繁琐，因此，Python提供了切片（Slice）操作符，能大大简化这种操作。", "\n", "对应上面的问题，取前3个元素，用一行代码就可以完成切片：", "\n", ">>> L[0:3]\n['Michael', 'Sarah', 'Tracy']\n", "L[0:3]", "表示，从索引", "0", "开始取，直到索引", "3", "为止，但不包括索引", "3", "。即索引", "0", "，", "1", "，", "2", "，正好是3个元素。", "\n", "如果第一个索引是", "0", "，还可以省略：", "\n", ">>> L[:3]\n['Michael', 'Sarah', 'Tracy']\n", "也可以从索引1开始，取出2个元素出来：", "\n", ">>> L[1:3]\n['Sarah', 'Tracy']\n", "类似的，既然Python支持", "L[-1]", "取倒数第一个元素，那么它同样支持倒数切片，试试：", "\n", ">>> L[-2:]\n['Bob', 'Jack']\n>>> L[-2:-1]\n['Bob']\n", "记住倒数第一个元素的索引是", "-1", "。", "\n", "切片操作十分有用。我们先创建一个0-99的数列：", "\n", ">>> L = list(range(100))\n>>> L\n[0, 1, 2, 3, ..., 99]\n", "可以通过切片轻松取出某一段数列。比如前10个数：", "\n", ">>> L[:10]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n", "后10个数：", "\n", ">>> L[-10:]\n[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n", "前11-20个数：", "\n", ">>> L[10:20]\n[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n", "前10个数，每两个取一个：", "\n", ">>> L[:10:2]\n[0, 2, 4, 6, 8]\n", "所有数，每5个取一个：", "\n", ">>> L[::5]\n[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]\n", "甚至什么都不写，只写", "[:]", "就可以原样复制一个list：", "\n", ">>> L[:]\n[0, 1, 2, 3, ..., 99]\n", "tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：", "\n", ">>> (0, 1, 2, 3, 4, 5)[:3]\n(0, 1, 2)\n", "字符串", "'xxx'", "也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：", "\n", ">>> 'ABCDEFG'[:3]\n'ABC'\n>>> 'ABCDEFG'[::2]\n'ACEG'\n", "在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），其实目的就是对字符串切片。Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。", "\n", "小结", "\n", "有了切片操作，很多地方循环就不再需要了。Python的切片非常灵活，一行代码就可以实现很多行循环才能完成的操作。", "\n", "参考源码", "\n", "do_slice.py", "\n\n    "]}
{"title": ["高级特性"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317568446245b3e1c8837414168bcd2d485e553779e000", "desc": ["\n        ", "掌握了Python的数据类型、语句和函数，基本上就可以编写出很多有用的程序了。", "\n", "比如构造一个", "1, 3, 5, 7, ..., 99", "的列表，可以通过循环实现：", "\n", "L = []\nn = 1\nwhile n <= 99:\n    L.append(n)\n    n = n + 2\n", "取list的前一半的元素，也可以通过循环实现。", "\n", "但是在Python中，代码不是越多越好，而是越少越好。代码不是越复杂越好，而是越简单越好。", "\n", "基于这一思想，我们来介绍Python中非常有用的高级特性，1行代码能实现的功能，决不写5行代码。请始终牢记，代码越少，开发效率越高。", "\n\n    "]}
{"title": ["递归函数"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431756044276a15558a759ec43de8e30eb0ed169fb11000", "desc": ["\n        ", "在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。", "\n", "举个例子，我们来计算阶乘", "n! = 1 x 2 x 3 x ... x n", "，用函数", "fact(n)", "表示，可以看出：", "\n", "fact(n) = n! = 1 x 2 x 3 x ... x (n-1) x n = (n-1)! x n = fact(n-1) x n", "\n", "所以，", "fact(n)", "可以表示为", "n x fact(n-1)", "，只有n=1时需要特殊处理。", "\n", "于是，", "fact(n)", "用递归的方式写出来就是：", "\n", "def fact(n):\n    if n==1:\n        return 1\n    return n * fact(n - 1)\n", "上面就是一个递归函数。可以试试：", "\n", ">>> fact(1)\n1\n>>> fact(5)\n120\n>>> fact(100)\n93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000\n", "如果我们计算", "fact(5)", "，可以根据函数定义看到计算过程如下：", "\n", "===> fact(5)\n===> 5 * fact(4)\n===> 5 * (4 * fact(3))\n===> 5 * (4 * (3 * fact(2)))\n===> 5 * (4 * (3 * (2 * fact(1))))\n===> 5 * (4 * (3 * (2 * 1)))\n===> 5 * (4 * (3 * 2))\n===> 5 * (4 * 6)\n===> 5 * 24\n===> 120\n", "递归函数的优点是定义简单，逻辑清晰。理论上，所有的递归函数都可以写成循环的方式，但循环的逻辑不如递归清晰。", "\n", "使用递归函数需要注意防止栈溢出。在计算机中，函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出。可以试试", "fact(1000)", "：", "\n", ">>> fact(1000)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 4, in fact\n  ...\n  File \"<stdin>\", line 4, in fact\nRuntimeError: maximum recursion depth exceeded in comparison\n", "解决递归调用栈溢出的方法是通过", "尾递归", "优化，事实上尾递归和循环的效果是一样的，所以，把循环看成是一种特殊的尾递归函数也是可以的。", "\n", "尾递归是指，在函数返回的时候，调用自身本身，并且，return语句不能包含表达式。这样，编译器或者解释器就可以把尾递归做优化，使递归本身无论调用多少次，都只占用一个栈帧，不会出现栈溢出的情况。", "\n", "上面的", "fact(n)", "函数由于", "return n * fact(n - 1)", "引入了乘法表达式，所以就不是尾递归了。要改成尾递归方式，需要多一点代码，主要是要把每一步的乘积传入到递归函数中：", "\n", "def fact(n):\n    return fact_iter(n, 1)\n\ndef fact_iter(num, product):\n    if num == 1:\n        return product\n    return fact_iter(num - 1, num * product)\n", "可以看到，", "return fact_iter(num - 1, num * product)", "仅返回递归函数本身，", "num - 1", "和", "num * product", "在函数调用前就会被计算，不影响函数调用。", "\n", "fact(5)", "对应的", "fact_iter(5, 1)", "的调用如下：", "\n", "===> fact_iter(5, 1)\n===> fact_iter(4, 5)\n===> fact_iter(3, 20)\n===> fact_iter(2, 60)\n===> fact_iter(1, 120)\n===> 120\n", "尾递归调用时，如果做了优化，栈不会增长，因此，无论多少次调用也不会导致栈溢出。", "\n", "遗憾的是，大多数编程语言没有针对尾递归做优化，Python解释器也没有做优化，所以，即使把上面的", "fact(n)", "函数改成尾递归方式，也会导致栈溢出。", "\n", "小结", "\n", "使用递归函数的优点是逻辑简单清晰，缺点是过深的调用会导致栈溢出。", "\n", "针对尾递归优化的语言可以通过尾递归防止栈溢出。尾递归事实上和循环是等价的，没有循环语句的编程语言只能通过尾递归实现循环。", "\n", "Python标准的解释器没有针对尾递归做优化，任何递归函数都存在栈溢出的问题。", "\n", "练习", "\n", "汉诺塔", "的移动可以用递归函数非常简单地实现。", "\n", "请编写", "move(n, a, b, c)", "函数，它接收参数", "n", "，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法，例如：", "\n", "\ndef move(n, a, b, c):\n----\n    pass\n----\n# 期待输出:\n# A --> C\n# A --> B\n# C --> B\n# A --> C\n# B --> A\n# B --> C\n# A --> C\nmove(3, 'A', 'B', 'C')\n", "\n\n", "参考源码", "\n", "recur.py", "\n\n    "]}
{"title": ["函数的参数"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431752945034eb82ac80a3e64b9bb4929b16eeed1eb9000", "desc": ["\n        ", "定义函数的时候，我们把参数的名字和位置确定下来，函数的接口定义就完成了。对于函数的调用者来说，只需要知道如何传递正确的参数，以及函数将返回什么样的值就够了，函数内部的复杂逻辑被封装起来，调用者无需了解。", "\n", "Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。", "\n", "位置参数", "\n", "我们先写一个计算x", "2", "的函数：", "\n", "def power(x):\n    return x * x\n", "对于", "power(x)", "函数，参数", "x", "就是一个位置参数。", "\n", "当我们调用", "power", "函数时，必须传入有且仅有的一个参数", "x", "：", "\n", ">>> power(5)\n25\n>>> power(15)\n225\n", "现在，如果我们要计算x", "3", "怎么办？可以再定义一个", "power3", "函数，但是如果要计算x", "4", "、x", "5", "……怎么办？我们不可能定义无限多个函数。", "\n", "你也许想到了，可以把", "power(x)", "修改为", "power(x, n)", "，用来计算x", "n", "，说干就干：", "\n", "def power(x, n):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n", "对于这个修改后的", "power(x, n)", "函数，可以计算任意n次方：", "\n", ">>> power(5, 2)\n25\n>>> power(5, 3)\n125\n", "修改后的", "power(x, n)", "函数有两个参数：", "x", "和", "n", "，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数", "x", "和", "n", "。", "\n", "默认参数", "\n", "新的", "power(x, n)", "函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：", "\n", ">>> power(5)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: power() missing 1 required positional argument: 'n'\n", "Python的错误信息很明确：调用函数", "power()", "缺少了一个位置参数", "n", "。", "\n", "这个时候，默认参数就排上用场了。由于我们经常计算x", "2", "，所以，完全可以把第二个参数n的默认值设定为2：", "\n", "def power(x, n=2):\n    s = 1\n    while n > 0:\n        n = n - 1\n        s = s * x\n    return s\n", "这样，当我们调用", "power(5)", "时，相当于调用", "power(5, 2)", "：", "\n", ">>> power(5)\n25\n>>> power(5, 2)\n25\n", "而对于", "n > 2", "的其他情况，就必须明确地传入n，比如", "power(5, 3)", "。", "\n", "从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：", "\n", "一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；", "\n", "二是如何设置默认参数。", "\n", "当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。", "\n", "使用默认参数有什么好处？最大的好处是能降低调用函数的难度。", "\n", "举个例子，我们写个一年级小学生注册的函数，需要传入", "name", "和", "gender", "两个参数：", "\n", "def enroll(name, gender):\n    print('name:', name)\n    print('gender:', gender)\n", "这样，调用", "enroll()", "函数只需要传入两个参数：", "\n", ">>> enroll('Sarah', 'F')\nname: Sarah\ngender: F\n", "如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。", "\n", "我们可以把年龄和城市设为默认参数：", "\n", "def enroll(name, gender, age=6, city='Beijing'):\n    print('name:', name)\n    print('gender:', gender)\n    print('age:', age)\n    print('city:', city)\n", "这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：", "\n", ">>> enroll('Sarah', 'F')\nname: Sarah\ngender: F\nage: 6\ncity: Beijing\n", "只有与默认参数不符的学生才需要提供额外的信息：", "\n", "enroll('Bob', 'M', 7)\nenroll('Adam', 'M', city='Tianjin')\n", "可见，默认参数降低了函数调用的难度，而一旦需要更复杂的调用时，又可以传递更多的参数来实现。无论是简单调用还是复杂调用，函数只需要定义一个。", "\n", "有多个默认参数时，调用的时候，既可以按顺序提供默认参数，比如调用", "enroll('Bob', 'M', 7)", "，意思是，除了", "name", "，", "gender", "这两个参数外，最后1个参数应用在参数", "age", "上，", "city", "参数由于没有提供，仍然使用默认值。", "\n", "也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用", "enroll('Adam', 'M', city='Tianjin')", "，意思是，", "city", "参数用传进去的值，其他默认参数继续使用默认值。", "\n", "默认参数很有用，但使用不当，也会掉坑里。默认参数有个最大的坑，演示如下：", "\n", "先定义一个函数，传入一个list，添加一个", "END", "再返回：", "\n", "def add_end(L=[]):\n    L.append('END')\n    return L\n", "当你正常调用时，结果似乎不错：", "\n", ">>> add_end([1, 2, 3])\n[1, 2, 3, 'END']\n>>> add_end(['x', 'y', 'z'])\n['x', 'y', 'z', 'END']\n", "当你使用默认参数调用时，一开始结果也是对的：", "\n", ">>> add_end()\n['END']\n", "但是，再次调用", "add_end()", "时，结果就不对了：", "\n", ">>> add_end()\n['END', 'END']\n>>> add_end()\n['END', 'END', 'END']\n", "很多初学者很疑惑，默认参数是", "[]", "，但是函数似乎每次都“记住了”上次添加了", "'END'", "后的list。", "\n", "原因解释如下：", "\n", "Python函数在定义的时候，默认参数", "L", "的值就被计算出来了，即", "[]", "，因为默认参数", "L", "也是一个变量，它指向对象", "[]", "，每次调用该函数，如果改变了", "L", "的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的", "[]", "了。", "\n", "所以，定义默认参数要牢记一点：默认参数必须指向不变对象！", "\n", "要修改上面的例子，我们可以用", "None", "这个不变对象来实现：", "\n", "def add_end(L=None):\n    if L is None:\n        L = []\n    L.append('END')\n    return L\n", "现在，无论调用多少次，都不会有问题：", "\n", ">>> add_end()\n['END']\n>>> add_end()\n['END']\n", "为什么要设计", "str", "、", "None", "这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。", "\n", "可变参数", "\n", "在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。", "\n", "我们以数学题为例子，给定一组数字a，b，c……，请计算a", "2", " + b", "2", " + c", "2", " + ……。", "\n", "要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：", "\n", "def calc(numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n", "但是调用的时候，需要先组装出一个list或tuple：", "\n", ">>> calc([1, 2, 3])\n14\n>>> calc((1, 3, 5, 7))\n84\n", "如果利用可变参数，调用函数的方式可以简化成这样：", "\n", ">>> calc(1, 2, 3)\n14\n>>> calc(1, 3, 5, 7)\n84\n", "所以，我们把函数的参数改为可变参数：", "\n", "def calc(*numbers):\n    sum = 0\n    for n in numbers:\n        sum = sum + n * n\n    return sum\n", "定义可变参数和定义一个list或tuple参数相比，仅仅在参数前面加了一个", "*", "号。在函数内部，参数", "numbers", "接收到的是一个tuple，因此，函数代码完全不变。但是，调用该函数时，可以传入任意个参数，包括0个参数：", "\n", ">>> calc(1, 2)\n5\n>>> calc()\n0\n", "如果已经有一个list或者tuple，要调用一个可变参数怎么办？可以这样做：", "\n", ">>> nums = [1, 2, 3]\n>>> calc(nums[0], nums[1], nums[2])\n14\n", "这种写法当然是可行的，问题是太繁琐，所以Python允许你在list或tuple前面加一个", "*", "号，把list或tuple的元素变成可变参数传进去：", "\n", ">>> nums = [1, 2, 3]\n>>> calc(*nums)\n14\n", "*nums", "表示把", "nums", "这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。", "\n", "关键字参数", "\n", "可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple。而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict。请看示例：", "\n", "def person(name, age, **kw):\n    print('name:', name, 'age:', age, 'other:', kw)\n", "函数", "person", "除了必选参数", "name", "和", "age", "外，还接受关键字参数", "kw", "。在调用该函数时，可以只传入必选参数：", "\n", ">>> person('Michael', 30)\nname: Michael age: 30 other: {}\n", "也可以传入任意个数的关键字参数：", "\n", ">>> person('Bob', 35, city='Beijing')\nname: Bob age: 35 other: {'city': 'Beijing'}\n>>> person('Adam', 45, gender='M', job='Engineer')\nname: Adam age: 45 other: {'gender': 'M', 'job': 'Engineer'}\n", "关键字参数有什么用？它可以扩展函数的功能。比如，在", "person", "函数里，我们保证能接收到", "name", "和", "age", "这两个参数，但是，如果调用者愿意提供更多的参数，我们也能收到。试想你正在做一个用户注册的功能，除了用户名和年龄是必填项外，其他都是可选项，利用关键字参数来定义这个函数就能满足注册的需求。", "\n", "和可变参数类似，也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：", "\n", ">>> extra = {'city': 'Beijing', 'job': 'Engineer'}\n>>> person('Jack', 24, city=extra['city'], job=extra['job'])\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n", "当然，上面复杂的调用可以用简化的写法：", "\n", ">>> extra = {'city': 'Beijing', 'job': 'Engineer'}\n>>> person('Jack', 24, **extra)\nname: Jack age: 24 other: {'city': 'Beijing', 'job': 'Engineer'}\n", "**extra", "表示把", "extra", "这个dict的所有key-value用关键字参数传入到函数的", "**kw", "参数，", "kw", "将获得一个dict，注意", "kw", "获得的dict是", "extra", "的一份拷贝，对", "kw", "的改动不会影响到函数外的", "extra", "。", "\n", "命名关键字参数", "\n", "对于关键字参数，函数的调用者可以传入任意不受限制的关键字参数。至于到底传入了哪些，就需要在函数内部通过", "kw", "检查。", "\n", "仍以", "person()", "函数为例，我们希望检查是否有", "city", "和", "job", "参数：", "\n", "def person(name, age, **kw):\n    if 'city' in kw:\n        # 有city参数\n        pass\n    if 'job' in kw:\n        # 有job参数\n        pass\n    print('name:', name, 'age:', age, 'other:', kw)\n", "但是调用者仍可以传入不受限制的关键字参数：", "\n", ">>> person('Jack', 24, city='Beijing', addr='Chaoyang', zipcode=123456)\n", "如果要限制关键字参数的名字，就可以用命名关键字参数，例如，只接收", "city", "和", "job", "作为关键字参数。这种方式定义的函数如下：", "\n", "def person(name, age, *, city, job):\n    print(name, age, city, job)\n", "和关键字参数", "**kw", "不同，命名关键字参数需要一个特殊分隔符", "*", "，", "*", "后面的参数被视为命名关键字参数。", "\n", "调用方式如下：", "\n", ">>> person('Jack', 24, city='Beijing', job='Engineer')\nJack 24 Beijing Engineer\n", "命名关键字参数必须传入参数名，这和位置参数不同。如果没有传入参数名，调用将报错：", "\n", ">>> person('Jack', 24, 'Beijing', 'Engineer')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: person() takes 2 positional arguments but 4 were given\n", "由于调用时缺少参数名", "city", "和", "job", "，Python解释器把这4个参数均视为位置参数，但", "person()", "函数仅接受2个位置参数。", "\n", "命名关键字参数可以有缺省值，从而简化调用：", "\n", "def person(name, age, *, city='Beijing', job):\n    print(name, age, city, job)\n", "由于命名关键字参数", "city", "具有默认值，调用时，可不传入", "city", "参数：", "\n", ">>> person('Jack', 24, job='Engineer')\nJack 24 Beijing Engineer\n", "使用命名关键字参数时，要特别注意，", "*", "不是参数，而是特殊分隔符。如果缺少", "*", "，Python解释器将无法识别位置参数和命名关键字参数：", "\n", "def person(name, age, city, job):\n    # 缺少 *，city和job被视为位置参数\n    pass\n", "参数组合", "\n", "在Python中定义函数，可以用必选参数、默认参数、可变参数、关键字参数和命名关键字参数，这5种参数都可以组合使用，除了可变参数无法和命名关键字参数混合。但是请注意，参数定义的顺序必须是：必选参数、默认参数、可变参数/命名关键字参数和关键字参数。", "\n", "比如定义一个函数，包含上述若干种参数：", "\n", "def f1(a, b, c=0, *args, **kw):\n    print('a =', a, 'b =', b, 'c =', c, 'args =', args, 'kw =', kw)\n\ndef f2(a, b, c=0, *, d, **kw):\n    print('a =', a, 'b =', b, 'c =', c, 'd =', d, 'kw =', kw)\n", "在函数调用的时候，Python解释器自动按照参数位置和参数名把对应的参数传进去。", "\n", ">>> f1(1, 2)\na = 1 b = 2 c = 0 args = () kw = {}\n>>> f1(1, 2, c=3)\na = 1 b = 2 c = 3 args = () kw = {}\n>>> f1(1, 2, 3, 'a', 'b')\na = 1 b = 2 c = 3 args = ('a', 'b') kw = {}\n>>> f1(1, 2, 3, 'a', 'b', x=99)\na = 1 b = 2 c = 3 args = ('a', 'b') kw = {'x': 99}\n>>> f2(1, 2, d=99, ext=None)\na = 1 b = 2 c = 0 d = 99 kw = {'ext': None}\n", "最神奇的是通过一个tuple和dict，你也可以调用上述函数：", "\n", ">>> args = (1, 2, 3, 4)\n>>> kw = {'d': 99, 'x': '#'}\n>>> f1(*args, **kw)\na = 1 b = 2 c = 3 args = (4,) kw = {'d': 99, 'x': '#'}\n>>> args = (1, 2, 3)\n>>> kw = {'d': 88, 'x': '#'}\n>>> f2(*args, **kw)\na = 1 b = 2 c = 3 d = 88 kw = {'x': '#'}\n", "所以，对于任意函数，都可以通过类似", "func(*args, **kw)", "的形式调用它，无论它的参数是如何定义的。", "\n", "小结", "\n", "Python的函数具有非常灵活的参数形态，既可以实现简单的调用，又可以传入非常复杂的参数。", "\n", "默认参数一定要用不可变对象，如果是可变对象，程序运行时会有逻辑错误！", "\n", "要注意定义可变参数和关键字参数的语法：", "\n", "*args", "是可变参数，args接收的是一个tuple；", "\n", "**kw", "是关键字参数，kw接收的是一个dict。", "\n", "以及调用函数时如何传入可变参数和关键字参数的语法：", "\n", "可变参数既可以直接传入：", "func(1, 2, 3)", "，又可以先组装list或tuple，再通过", "*args", "传入：", "func(*(1, 2, 3))", "；", "\n", "关键字参数既可以直接传入：", "func(a=1, b=2)", "，又可以先组装dict，再通过", "**kw", "传入：", "func(**{'a': 1, 'b': 2})", "。", "\n", "使用", "*args", "和", "**kw", "是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。", "\n", "命名的关键字参数是为了限制调用者可以传入的参数名，同时可以提供默认值。", "\n", "定义命名的关键字参数不要忘了写分隔符", "*", "，否则定义的将是位置参数。", "\n", "参考源码", "\n", "var_args.py", "\n", "kw_args.py", "\n\n    "]}
{"title": ["定义函数"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431679203477b5b364aeba8c4e05a9bd4ec1b32911e2000", "desc": ["\n        ", "在Python中，定义一个函数要使用", "def", "语句，依次写出函数名、括号、括号中的参数和冒号", ":", "，然后，在缩进块中编写函数体，函数的返回值用", "return", "语句返回。", "\n", "我们以自定义一个求绝对值的", "my_abs", "函数为例：", "\n", "def my_abs(x):\n    if x >= 0:\n        return x\n    else:\n        return -x\n", "请自行测试并调用", "my_abs", "看看返回结果是否正确。", "\n", "请注意，函数体内部的语句在执行时，一旦执行到", "return", "时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。", "\n", "如果没有", "return", "语句，函数执行完毕后也会返回结果，只是结果为", "None", "。", "\n", "return None", "可以简写为", "return", "。", "\n", "在Python交互环境中定义函数时，注意Python会出现", "...", "的提示。函数定义结束后需要按两次回车重新回到", ">>>", "提示符下：", "\n", "\n", "\n", "\n", "\n\n", "如果你已经把", "my_abs()", "的函数定义保存为", "abstest.py", "文件了，那么，可以在该文件的当前目录下启动Python解释器，用", "from abstest import my_abs", "来导入", "my_abs()", "函数，注意", "abstest", "是文件名（不含", ".py", "扩展名）：", "\n", "\n", "\n", "\n", "\n\n", "import", "的用法在后续", "模块", "一节中会详细介绍。", "\n", "空函数", "\n", "如果想定义一个什么事也不做的空函数，可以用", "pass", "语句：", "\n", "def nop():\n    pass\n", "pass", "语句什么都不做，那有什么用？实际上", "pass", "可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个", "pass", "，让代码能运行起来。", "\n", "pass", "还可以用在其他语句里，比如：", "\n", "if age >= 18:\n    pass\n", "缺少了", "pass", "，代码运行就会有语法错误。", "\n", "参数检查", "\n", "调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出", "TypeError", "：", "\n", ">>> my_abs(1, 2)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: my_abs() takes 1 positional argument but 2 were given\n", "但是如果参数类型不对，Python解释器就无法帮我们检查。试试", "my_abs", "和内置函数", "abs", "的差别：", "\n", ">>> my_abs('A')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in my_abs\nTypeError: unorderable types: str() >= int()\n>>> abs('A')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: bad operand type for abs(): 'str'\n", "当传入了不恰当的参数时，内置函数", "abs", "会检查出参数错误，而我们定义的", "my_abs", "没有参数检查，会导致", "if", "语句出错，出错信息和", "abs", "不一样。所以，这个函数定义不够完善。", "\n", "让我们修改一下", "my_abs", "的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数", "isinstance()", "实现：", "\n", "def my_abs(x):\n    if not isinstance(x, (int, float)):\n        raise TypeError('bad operand type')\n    if x >= 0:\n        return x\n    else:\n        return -x\n", "添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：", "\n", ">>> my_abs('A')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 3, in my_abs\nTypeError: bad operand type\n", "错误和异常处理将在后续讲到。", "\n", "返回多个值", "\n", "函数可以返回多个值吗？答案是肯定的。", "\n", "比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的新的坐标：", "\n", "import math\n\ndef move(x, y, step, angle=0):\n    nx = x + step * math.cos(angle)\n    ny = y - step * math.sin(angle)\n    return nx, ny\n", "import math", "语句表示导入", "math", "包，并允许后续代码引用", "math", "包里的", "sin", "、", "cos", "等函数。", "\n", "然后，我们就可以同时获得返回值：", "\n", ">>> x, y = move(100, 100, 60, math.pi / 6)\n>>> print(x, y)\n151.96152422706632 70.0\n", "但其实这只是一种假象，Python函数返回的仍然是单一值：", "\n", ">>> r = move(100, 100, 60, math.pi / 6)\n>>> print(r)\n(151.96152422706632, 70.0)\n", "原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。", "\n", "小结", "\n", "定义函数时，需要确定函数名和参数个数；", "\n", "如果有必要，可以先对参数的数据类型做检查；", "\n", "函数体内部可以用", "return", "随时返回函数结果；", "\n", "函数执行完毕也没有", "return", "语句时，自动", "return None", "。", "\n", "函数可以同时返回多个值，但其实就是一个tuple。", "\n", "练习", "\n", "请定义一个函数", "quadratic(a, b, c)", "，接收3个参数，返回一元二次方程：", "\n", "ax", "2", " + bx + c = 0", "\n", "的两个解。", "\n", "提示：计算平方根可以调用", "math.sqrt()", "函数：", "\n", ">>> import math\n>>> math.sqrt(2)\n1.4142135623730951\n", "\n# -*- coding: utf-8 -*-\n\nimport math\n\ndef quadratic(a, b, c):\n----\n    pass\n----\n# 测试:\nprint(quadratic(2, 3, 1)) # => (-0.5, -1.0)\nprint(quadratic(1, 3, -4)) # => (1.0, -4.0)\n", "\n\n", "参考源码", "\n", "def_func.py", "\n\n    "]}
{"title": ["调用函数"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316784721058975e02b46cc45cb836bb0827607738d000", "desc": ["\n        ", "Python内置了很多有用的函数，我们可以直接调用。", "\n", "要调用一个函数，需要知道函数的名称和参数，比如求绝对值的函数", "abs", "，只有一个参数。可以直接从Python的官方网站查看文档：", "\n", "http://docs.python.org/3/library/functions.html#abs", "\n", "也可以在交互式命令行通过", "help(abs)", "查看", "abs", "函数的帮助信息。", "\n", "调用", "abs", "函数：", "\n", ">>> abs(100)\n100\n>>> abs(-20)\n20\n>>> abs(12.34)\n12.34\n", "调用函数的时候，如果传入的参数数量不对，会报", "TypeError", "的错误，并且Python会明确地告诉你：", "abs()", "有且仅有1个参数，但给出了两个：", "\n", ">>> abs(1, 2)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: abs() takes exactly one argument (2 given)\n", "如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报", "TypeError", "的错误，并且给出错误信息：", "str", "是错误的参数类型：", "\n", ">>> abs('a')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: bad operand type for abs(): 'str'\n", "而", "max", "函数", "max()", "可以接收任意多个参数，并返回最大的那个：", "\n", ">>> max(1, 2)\n2\n>>> max(2, 3, 1, -5)\n3\n", "数据类型转换", "\n", "Python内置的常用函数还包括数据类型转换函数，比如", "int()", "函数可以把其他数据类型转换为整数：", "\n", ">>> int('123')\n123\n>>> int(12.34)\n12\n>>> float('12.34')\n12.34\n>>> str(1.23)\n'1.23'\n>>> str(100)\n'100'\n>>> bool(1)\nTrue\n>>> bool('')\nFalse\n", "函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：", "\n", ">>> a = abs # 变量a指向abs函数\n>>> a(-1) # 所以也可以通过a调用abs函数\n1\n", "练习", "\n", "请利用Python内置的", "hex()", "函数把一个整数转换成十六进制表示的字符串：", "\n", "\n# -*- coding: utf-8 -*-\n\nn1 = 255\nn2 = 1000\n----\nprint(???)\n", "\n\n", "小结", "\n", "调用Python的函数，需要根据函数定义，传入正确的参数。如果函数调用出错，一定要学会看错误信息，所以英文很重要！", "\n", "参考源码", "\n", "call_func.py", "\n\n    "]}
{"title": ["函数"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167832686474803d3d2b7d4d6499cfd093dc47efcd000", "desc": ["\n        ", "我们知道圆的面积计算公式为：", "\n", "S = πr", "2", "\n", "当我们知道半径", "r", "的值时，就可以根据公式计算出面积。假设我们需要计算3个不同大小的圆的面积：", "\n", "r1 = 12.34\nr2 = 9.08\nr3 = 73.1\ns1 = 3.14 * r1 * r1\ns2 = 3.14 * r2 * r2\ns3 = 3.14 * r3 * r3\n", "当代码出现有规律的重复的时候，你就需要当心了，每次写", "3.14 * x * x", "不仅很麻烦，而且，如果要把", "3.14", "改成", "3.14159265359", "的时候，得全部替换。", "\n", "有了函数，我们就不再每次写", "s = 3.14 * x * x", "，而是写成更有意义的函数调用", "s = area_of_circle(x)", "，而函数", "area_of_circle", "本身只需要写一次，就可以多次调用。", "\n", "基本上所有的高级语言都支持函数，Python也不例外。Python不但能非常灵活地定义函数，而且本身内置了很多有用的函数，可以直接调用。", "\n", "抽象", "\n", "抽象是数学中非常常见的概念。举个例子：", "\n", "计算数列的和，比如：", "1 + 2 + 3 + ... + 100", "，写起来十分不方便，于是数学家发明了求和符号∑，可以把", "1 + 2 + 3 + ... + 100", "记作：", "\n", "100", "\n", "∑", "n", "\n", "n=1", "\n", "这种抽象记法非常强大，因为我们看到 ∑ 就可以理解成求和，而不是还原成低级的加法运算。", "\n", "而且，这种抽象记法是可扩展的，比如：", "\n", "100", "\n", "∑", "(n", "2", "+1)", "\n", "n=1", "\n", "还原成加法运算就变成了：", "\n", "(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + ... + (100 x 100 + 1)", "\n", "可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。", "\n", "写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。", "\n\n    "]}
{"title": ["使用dict和set"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143167793538255adf33371774853a0ef943280573f4d000", "desc": ["\n        ", "dict", "\n", "Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。", "\n", "举个例子，假设要根据同学的名字查找对应的成绩，如果用list实现，需要两个list：", "\n", "names = ['Michael', 'Bob', 'Tracy']\nscores = [95, 75, 85]\n", "给定一个名字，要查找对应的成绩，就先要在names中找到对应的位置，再从scores取出对应的成绩，list越长，耗时越长。", "\n", "如果用dict实现，只需要一个“名字”-“成绩”的对照表，直接根据名字查找成绩，无论这个表有多大，查找速度都不会变慢。用Python写一个dict如下：", "\n", ">>> d = {'Michael': 95, 'Bob': 75, 'Tracy': 85}\n>>> d['Michael']\n95\n", "为什么dict查找速度这么快？因为dict的实现原理和查字典是一样的。假设字典包含了1万个汉字，我们要查某一个字，一个办法是把字典从第一页往后翻，直到找到我们想要的字为止，这种方法就是在list中查找元素的方法，list越大，查找越慢。", "\n", "第二种方法是先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢。", "\n", "dict就是第二种实现方式，给定一个名字，比如", "'Michael'", "，dict在内部就可以直接计算出", "Michael", "对应的存放成绩的“页码”，也就是", "95", "这个数字存放的内存地址，直接取出来，所以速度非常快。", "\n", "你可以猜到，这种key-value存储方式，在放进去的时候，必须根据key算出value的存放位置，这样，取的时候才能根据key直接拿到value。", "\n", "把数据放入dict的方法，除了初始化时指定外，还可以通过key放入：", "\n", ">>> d['Adam'] = 67\n>>> d['Adam']\n67\n", "由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉：", "\n", ">>> d['Jack'] = 90\n>>> d['Jack']\n90\n>>> d['Jack'] = 88\n>>> d['Jack']\n88\n", "如果key不存在，dict就会报错：", "\n", ">>> d['Thomas']\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'Thomas'\n", "要避免key不存在的错误，有两种办法，一是通过", "in", "判断key是否存在：", "\n", ">>> 'Thomas' in d\nFalse\n", "二是通过dict提供的get方法，如果key不存在，可以返回None，或者自己指定的value：", "\n", ">>> d.get('Thomas')\n>>> d.get('Thomas', -1)\n-1\n", "注意：返回", "None", "的时候Python的交互式命令行不显示结果。", "\n", "要删除一个key，用", "pop(key)", "方法，对应的value也会从dict中删除：", "\n", ">>> d.pop('Bob')\n75\n>>> d\n{'Michael': 95, 'Tracy': 85}\n", "请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。", "\n", "和list比较，dict有以下几个特点：", "\n", "\n", "查找和插入的速度极快，不会随着key的增加而增加；", "\n", "需要占用大量的内存，内存浪费多。", "\n", "\n", "而list相反：", "\n", "\n", "查找和插入的时间随着元素的增加而增加；", "\n", "占用空间小，浪费内存很少。", "\n", "\n", "所以，dict是用空间来换取时间的一种方法。", "\n", "dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是", "不可变对象", "。", "\n", "这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。", "\n", "要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：", "\n", ">>> key = [1, 2, 3]\n>>> d[key] = 'a list'\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: unhashable type: 'list'\n", "set", "\n", "set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。", "\n", "要创建一个set，需要提供一个list作为输入集合：", "\n", ">>> s = set([1, 2, 3])\n>>> s\n{1, 2, 3}\n", "注意，传入的参数", "[1, 2, 3]", "是一个list，而显示的", "{1, 2, 3}", "只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的。。", "\n", "重复元素在set中自动被过滤：", "\n", ">>> s = set([1, 1, 2, 2, 3, 3])\n>>> s\n{1, 2, 3}\n", "通过", "add(key)", "方法可以添加元素到set中，可以重复添加，但不会有效果：", "\n", ">>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n>>> s.add(4)\n>>> s\n{1, 2, 3, 4}\n", "通过", "remove(key)", "方法可以删除元素：", "\n", ">>> s.remove(4)\n>>> s\n{1, 2, 3}\n", "set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：", "\n", ">>> s1 = set([1, 2, 3])\n>>> s2 = set([2, 3, 4])\n>>> s1 & s2\n{2, 3}\n>>> s1 | s2\n{1, 2, 3, 4}\n", "set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。", "\n", "再议不可变对象", "\n", "上面我们讲了，str是不变对象，而list是可变对象。", "\n", "对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：", "\n", ">>> a = ['c', 'b', 'a']\n>>> a.sort()\n>>> a\n['a', 'b', 'c']\n", "而对于不可变对象，比如str，对str进行操作呢：", "\n", ">>> a = 'abc'\n>>> a.replace('a', 'A')\n'Abc'\n>>> a\n'abc'\n", "虽然字符串有个", "replace()", "方法，也确实变出了", "'Abc'", "，但变量", "a", "最后仍是", "'abc'", "，应该怎么理解呢？", "\n", "我们先把代码改成下面这样：", "\n", ">>> a = 'abc'\n>>> b = a.replace('a', 'A')\n>>> b\n'Abc'\n>>> a\n'abc'\n", "要始终牢记的是，", "a", "是变量，而", "'abc'", "才是字符串对象！有些时候，我们经常说，对象", "a", "的内容是", "'abc'", "，但其实是指，", "a", "本身是一个变量，它指向的对象的内容才是", "'abc'", "：", "\n", "\n", "当我们调用", "a.replace('a', 'A')", "时，实际上调用方法", "replace", "是作用在字符串对象", "'abc'", "上的，而这个方法虽然名字叫", "replace", "，但却没有改变字符串", "'abc'", "的内容。相反，", "replace", "方法创建了一个新字符串", "'Abc'", "并返回，如果我们用变量", "b", "指向该新字符串，就容易理解了，变量", "a", "仍指向原有的字符串", "'abc'", "，但变量", "b", "却指向新字符串", "'Abc'", "了：", "\n", "\n", "所以，对于不变对象来说，调用对象自身的任意方法，也不会改变该对象自身的内容。相反，这些方法会创建新的对象并返回，这样，就保证了不可变对象本身永远是不可变的。", "\n", "小结", "\n", "使用key-value存储结构的dict在Python中非常有用，选择不可变对象作为key很重要，最常用的key是字符串。", "\n", "tuple虽然是不变对象，但试试把", "(1, 2, 3)", "和", "(1, [2, 3])", "放入dict或set中，并解释结果。", "\n", "参考源码", "\n", "the_dict.py", "\n", "the_set.py", "\n\n    "]}
{"title": ["循环"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431676242561226b32a9ec624505bb8f723d0027b3e7000", "desc": ["\n        ", "循环", "\n", "要计算1+2+3，我们可以直接写表达式：", "\n", ">>> 1 + 2 + 3\n6\n", "要计算1+2+3+...+10，勉强也能写出来。", "\n", "但是，要计算1+2+3+...+10000，直接写表达式就不可能了。", "\n", "为了让计算机能计算成千上万次的重复运算，我们就需要循环语句。", "\n", "Python的循环有两种，一种是for...in循环，依次把list或tuple中的每个元素迭代出来，看例子：", "\n", "names = ['Michael', 'Bob', 'Tracy']\nfor name in names:\n    print(name)\n", "执行这段代码，会依次打印", "names", "的每一个元素：", "\n", "Michael\nBob\nTracy\n", "所以", "for x in ...", "循环就是把每个元素代入变量", "x", "，然后执行缩进块的语句。", "\n", "再比如我们想计算1-10的整数之和，可以用一个", "sum", "变量做累加：", "\n", "sum = 0\nfor x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:\n    sum = sum + x\nprint(sum)\n", "如果要计算1-100的整数之和，从1写到100有点困难，幸好Python提供一个", "range()", "函数，可以生成一个整数序列，再通过", "list()", "函数可以转换为list。比如", "range(5)", "生成的序列是从0开始小于5的整数：", "\n", ">>> list(range(5))\n[0, 1, 2, 3, 4]\n", "range(101)", "就可以生成0-100的整数序列，计算如下：", "\n", "sum = 0\nfor x in range(101):\n    sum = sum + x\nprint(sum)\n", "请自行运行上述代码，看看结果是不是当年高斯同学心算出的5050。", "\n", "第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。比如我们要计算100以内所有奇数之和，可以用while循环实现：", "\n", "sum = 0\nn = 99\nwhile n > 0:\n    sum = sum + n\n    n = n - 2\nprint(sum)\n", "在循环内部变量", "n", "不断自减，直到变为", "-1", "时，不再满足while条件，循环退出。", "\n", "练习", "\n", "请利用循环依次对list中的每个名字打印出", "Hello, xxx!", "：", "\n", "\n# -*- coding: utf-8 -*-\nL = ['Bart', 'Lisa', 'Adam']\n", "\n\n", "小结", "\n", "循环是让计算机做重复任务的有效的方法，有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用", "Ctrl+C", "退出程序，或者强制结束Python进程。", "\n", "请试写一个死循环程序。", "\n", "参考源码", "\n", "do_for.py", "\n", "do_while.py", "\n\n    "]}
{"title": ["条件判断"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431675624710bb20e9734ef343bbb4bd64bcd37d4b52000", "desc": ["\n        ", "条件判断", "\n", "计算机之所以能做很多自动化的任务，因为它可以自己做条件判断。", "\n", "比如，输入用户年龄，根据年龄打印不同的内容，在Python程序中，用", "if", "语句实现：", "\n", "age = 20\nif age >= 18:\n    print('your age is', age)\n    print('adult')\n", "根据Python的缩进规则，如果", "if", "语句判断是", "True", "，就把缩进的两行print语句执行了，否则，什么也不做。", "\n", "也可以给", "if", "添加一个", "else", "语句，意思是，如果", "if", "判断是", "False", "，不要执行", "if", "的内容，去把", "else", "执行了：", "\n", "age = 3\nif age >= 18:\n    print('your age is', age)\n    print('adult')\nelse:\n    print('your age is', age)\n    print('teenager')\n", "注意不要少写了冒号", ":", "。", "\n", "当然上面的判断是很粗略的，完全可以用", "elif", "做更细致的判断：", "\n", "age = 3\nif age >= 18:\n    print('adult')\nelif age >= 6:\n    print('teenager')\nelse:\n    print('kid')\n", "elif", "是", "else if", "的缩写，完全可以有多个", "elif", "，所以", "if", "语句的完整形式就是：", "\n", "if <条件判断1>:\n    <执行1>\nelif <条件判断2>:\n    <执行2>\nelif <条件判断3>:\n    <执行3>\nelse:\n    <执行4>\n", "if", "语句执行有个特点，它是从上往下判断，如果在某个判断上是", "True", "，把该判断对应的语句执行后，就忽略掉剩下的", "elif", "和", "else", "，所以，请测试并解释为什么下面的程序打印的是", "teenager", "：", "\n", "age = 20\nif age >= 6:\n    print('teenager')\nelif age >= 18:\n    print('adult')\nelse:\n    print('kid')\n", "if", "判断条件还可以简写，比如写：", "\n", "if x:\n    print('True')\n", "只要", "x", "是非零数值、非空字符串、非空list等，就判断为", "True", "，否则为", "False", "。", "\n", "再议 input", "\n", "最后看一个有问题的条件判断。很多同学会用", "input()", "读取用户的输入，这样可以自己输入，程序运行得更有意思：", "\n", "birth = input('birth: ')\nif birth < 2000:\n    print('00前')\nelse:\n    print('00后')\n", "输入", "1982", "，结果报错：", "\n", "Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: unorderable types: str() > int()\n", "这是因为", "input()", "返回的数据类型是", "str", "，", "str", "不能直接和整数比较，必须先把", "str", "转换成整数。Python提供了", "int()", "函数来完成这件事情：", "\n", "s = input('birth: ')\nbirth = int(s)\nif birth < 2000:\n    print('00前')\nelse:\n    print('00后')\n", "再次运行，就可以得到正确地结果。但是，如果输入", "abc", "呢？又会得到一个错误信息：", "\n", "Traceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: 'abc'\n", "原来", "int()", "函数发现一个字符串并不是合法的数字时就会报错，程序就退出了。", "\n", "如何检查并捕获程序运行期的错误呢？后面的错误和调试会讲到。", "\n", "练习", "\n", "小明身高1.75，体重80.5kg。请根据BMI公式（体重除以身高的平方）帮小明计算他的BMI指数，并根据BMI指数：", "\n", "\n", "低于18.5：过轻", "\n", "18.5-25：正常", "\n", "25-28：过重", "\n", "28-32：肥胖", "\n", "高于32：严重肥胖", "\n", "\n", "用", "if-elif", "判断并打印结果：", "\n", "\n# -*- coding: utf-8 -*-\n\nheight = 1.75\nweight = 80.5\n----\nbmi = ???\nif ???:\n    pass\n", "\n\n", "小结", "\n", "条件判断可以让计算机自己做选择，Python的if...elif...else很灵活。", "\n", "\n", "参考源码", "\n", "do_if.py", "\n\n    "]}
{"title": ["使用list和tuple"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014316724772904521142196b74a3f8abf93d8e97c6ee6000", "desc": ["\n        ", "list", "\n", "Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。", "\n", "比如，列出班里所有同学的名字，就可以用一个list表示：", "\n", ">>> classmates = ['Michael', 'Bob', 'Tracy']\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n", "变量", "classmates", "就是一个list。用", "len()", "函数可以获得list元素的个数：", "\n", ">>> len(classmates)\n3\n", "用索引来访问list中每一个位置的元素，记得索引是从", "0", "开始的：", "\n", ">>> classmates[0]\n'Michael'\n>>> classmates[1]\n'Bob'\n>>> classmates[2]\n'Tracy'\n>>> classmates[3]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n", "当索引超出了范围时，Python会报一个IndexError错误，所以，要确保索引不要越界，记得最后一个元素的索引是", "len(classmates) - 1", "。", "\n", "如果要取最后一个元素，除了计算索引位置外，还可以用", "-1", "做索引，直接获取最后一个元素：", "\n", ">>> classmates[-1]\n'Tracy'\n", "以此类推，可以获取倒数第2个、倒数第3个：", "\n", ">>> classmates[-2]\n'Bob'\n>>> classmates[-3]\n'Michael'\n>>> classmates[-4]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n", "当然，倒数第4个就越界了。", "\n", "list是一个可变的有序表，所以，可以往list中追加元素到末尾：", "\n", ">>> classmates.append('Adam')\n>>> classmates\n['Michael', 'Bob', 'Tracy', 'Adam']\n", "也可以把元素插入到指定的位置，比如索引号为", "1", "的位置：", "\n", ">>> classmates.insert(1, 'Jack')\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy', 'Adam']\n", "要删除list末尾的元素，用", "pop()", "方法：", "\n", ">>> classmates.pop()\n'Adam'\n>>> classmates\n['Michael', 'Jack', 'Bob', 'Tracy']\n", "要删除指定位置的元素，用", "pop(i)", "方法，其中", "i", "是索引位置：", "\n", ">>> classmates.pop(1)\n'Jack'\n>>> classmates\n['Michael', 'Bob', 'Tracy']\n", "要把某个元素替换成别的元素，可以直接赋值给对应的索引位置：", "\n", ">>> classmates[1] = 'Sarah'\n>>> classmates\n['Michael', 'Sarah', 'Tracy']\n", "list里面的元素的数据类型也可以不同，比如：", "\n", ">>> L = ['Apple', 123, True]\n", "list元素也可以是另一个list，比如：", "\n", ">>> s = ['python', 'java', ['asp', 'php'], 'scheme']\n>>> len(s)\n4\n", "要注意", "s", "只有4个元素，其中", "s[2]", "又是一个list，如果拆开写就更容易理解了：", "\n", ">>> p = ['asp', 'php']\n>>> s = ['python', 'java', p, 'scheme']\n", "要拿到", "'php'", "可以写", "p[1]", "或者", "s[2][1]", "，因此", "s", "可以看成是一个二维数组，类似的还有三维、四维……数组，不过很少用到。", "\n", "如果一个list中一个元素也没有，就是一个空的list，它的长度为0：", "\n", ">>> L = []\n>>> len(L)\n0\n", "tuple", "\n", "另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改，比如同样是列出同学的名字：", "\n", ">>> classmates = ('Michael', 'Bob', 'Tracy')\n", "现在，classmates这个tuple不能变了，它也没有append()，insert()这样的方法。其他获取元素的方法和list是一样的，你可以正常地使用", "classmates[0]", "，", "classmates[-1]", "，但不能赋值成另外的元素。", "\n", "不可变的tuple有什么意义？因为tuple不可变，所以代码更安全。如果可能，能用tuple代替list就尽量用tuple。", "\n", "tuple的陷阱：当你定义一个tuple时，在定义的时候，tuple的元素就必须被确定下来，比如：", "\n", ">>> t = (1, 2)\n>>> t\n(1, 2)\n", "如果要定义一个空的tuple，可以写成", "()", "：", "\n", ">>> t = ()\n>>> t\n()\n", "但是，要定义一个只有1个元素的tuple，如果你这么定义：", "\n", ">>> t = (1)\n>>> t\n1\n", "定义的不是tuple，是", "1", "这个数！这是因为括号", "()", "既可以表示tuple，又可以表示数学公式中的小括号，这就产生了歧义，因此，Python规定，这种情况下，按小括号进行计算，计算结果自然是", "1", "。", "\n", "所以，只有1个元素的tuple定义时必须加一个逗号", ",", "，来消除歧义：", "\n", ">>> t = (1,)\n>>> t\n(1,)\n", "Python在显示只有1个元素的tuple时，也会加一个逗号", ",", "，以免你误解成数学计算意义上的括号。", "\n", "最后来看一个“可变的”tuple：", "\n", ">>> t = ('a', 'b', ['A', 'B'])\n>>> t[2][0] = 'X'\n>>> t[2][1] = 'Y'\n>>> t\n('a', 'b', ['X', 'Y'])\n", "这个tuple定义的时候有3个元素，分别是", "'a'", "，", "'b'", "和一个list。不是说tuple一旦定义后就不可变了吗？怎么后来又变了？", "\n", "别急，我们先看看定义的时候tuple包含的3个元素：", "\n", "\n", "当我们把list的元素", "'A'", "和", "'B'", "修改为", "'X'", "和", "'Y'", "后，tuple变为：", "\n", "\n", "表面上看，tuple的元素确实变了，但其实变的不是tuple的元素，而是list的元素。tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，tuple的每个元素，指向永远不变。即指向", "'a'", "，就不能改成指向", "'b'", "，指向一个list，就不能改成指向其他对象，但指向的这个list本身是可变的！", "\n", "理解了“指向不变”后，要创建一个内容也不变的tuple怎么做？那就必须保证tuple的每一个元素本身也不能变。", "\n", "练习", "\n", "请用索引取出下面list的指定元素：", "\n", "\n# -*- coding: utf-8 -*-\n\nL = [\n    ['Apple', 'Google', 'Microsoft'],\n    ['Java', 'Python', 'Ruby', 'PHP'],\n    ['Adam', 'Bart', 'Lisa']\n]\n----\n# 打印Apple:\nprint(?)\n# 打印Python:\nprint(?)\n# 打印Lisa:\nprint(?)\n", "\n\n", "小结", "\n", "list和tuple是Python内置的有序集合，一个可变，一个不可变。根据需要来选择使用它们。", "\n", "参考源码", "\n", "the_list.py", "\n", "the_tuple.py", "\n\n    "]}
{"title": ["字符串和编码"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431664106267f12e9bef7ee14cf6a8776a479bdec9b9000", "desc": ["\n        ", "字符编码", "\n", "我们已经讲过了，字符串也是一种数据类型，但是，字符串比较特殊的是还有一个编码问题。", "\n", "因为计算机只能处理数字，如果要处理文本，就必须先把文本转换为数字才能处理。最早的计算机在设计时采用8个比特（bit）作为一个字节（byte），所以，一个字节能表示的最大的整数就是255（二进制11111111=十进制255），如果要表示更大的整数，就必须用更多的字节。比如两个字节可以表示的最大整数是", "65535", "，4个字节可以表示的最大整数是", "4294967295", "。", "\n", "由于计算机是美国人发明的，因此，最早只有127个字母被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为", "ASCII", "编码，比如大写字母", "A", "的编码是", "65", "，小写字母", "z", "的编码是", "122", "。", "\n", "但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了", "GB2312", "编码，用来把中文编进去。", "\n", "你可以想得到的是，全世界有上百种语言，日本把日文编到", "Shift_JIS", "里，韩国把韩文编到", "Euc-kr", "里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。", "\n", "\n", "因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。", "\n", "Unicode标准也在不断发展，但最常用的是用两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）。现代操作系统和大多数编程语言都直接支持Unicode。", "\n", "现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。", "\n", "字母", "A", "用ASCII编码是十进制的", "65", "，二进制的", "01000001", "；", "\n", "字符", "0", "用ASCII编码是十进制的", "48", "，二进制的", "00110000", "，注意字符", "'0'", "和整数", "0", "是不同的；", "\n", "汉字", "中", "已经超出了ASCII编码的范围，用Unicode编码是十进制的", "20013", "，二进制的", "01001110 00101101", "。", "\n", "你可以猜测，如果把ASCII编码的", "A", "用Unicode编码，只需要在前面补0就可以，因此，", "A", "的Unicode编码是", "00000000 01000001", "。", "\n", "新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。", "\n", "所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的", "UTF-8", "编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：", "\n", "\n", "字符", "ASCII", "Unicode", "UTF-8", "\n", "A", "01000001", "00000000 01000001", "01000001", "\n", "中", "x", "01001110 00101101", "11100100 10111000 10101101", "\n", "\n\n", "从上面的表格还可以发现，UTF-8编码有一个额外的好处，就是ASCII编码实际上可以被看成是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。", "\n", "搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：", "\n", "在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。", "\n", "用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：", "\n", "\n", "浏览网页的时候，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：", "\n", "\n", "所以你看到很多网页的源码上会有类似", "<meta charset=\"UTF-8\" />", "的信息，表示该网页正是用的UTF-8编码。", "\n", "Python的字符串", "\n", "搞清楚了令人头疼的字符编码问题后，我们再来研究Python的字符串。", "\n", "在最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：", "\n", ">>> print('包含中文的str')\n包含中文的str\n", "对于单个字符的编码，Python提供了", "ord()", "函数获取字符的整数表示，", "chr()", "函数把编码转换为对应的字符：", "\n", ">>> ord('A')\n65\n>>> ord('中')\n20013\n>>> chr(66)\n'B'\n>>> chr(25991)\n'文'\n", "如果知道字符的整数编码，还可以用十六进制这么写", "str", "：", "\n", ">>> '\\u4e2d\\u6587'\n'中文'\n", "两种写法完全是等价的。", "\n", "由于Python的字符串类型是", "str", "，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把", "str", "变为以字节为单位的", "bytes", "。", "\n", "Python对", "bytes", "类型的数据用带", "b", "前缀的单引号或双引号表示：", "\n", "x = b'ABC'\n", "要注意区分", "'ABC'", "和", "b'ABC'", "，前者是", "str", "，后者虽然内容显示得和前者一样，但", "bytes", "的每个字符都只占用一个字节。", "\n", "以Unicode表示的", "str", "通过", "encode()", "方法可以编码为指定的", "bytes", "，例如：", "\n", ">>> 'ABC'.encode('ascii')\nb'ABC'\n>>> '中文'.encode('utf-8')\nb'\\xe4\\xb8\\xad\\xe6\\x96\\x87'\n>>> '中文'.encode('ascii')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)\n", "纯英文的", "str", "可以用", "ASCII", "编码为", "bytes", "，内容是一样的，含有中文的", "str", "可以用", "UTF-8", "编码为", "bytes", "。含有中文的", "str", "无法用", "ASCII", "编码，因为中文编码的范围超过了", "ASCII", "编码的范围，Python会报错。", "\n", "在", "bytes", "中，无法显示为ASCII字符的字节，用", "\\x##", "显示。", "\n", "反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是", "bytes", "。要把", "bytes", "变为", "str", "，就需要用", "decode()", "方法：", "\n", ">>> b'ABC'.decode('ascii')\n'ABC'\n>>> b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'.decode('utf-8')\n'中文'\n", "要计算", "str", "包含多少个字符，可以用", "len()", "函数：", "\n", ">>> len('ABC')\n3\n>>> len('中文')\n2\n", "len()", "函数计算的是", "str", "的字符数，如果换成", "bytes", "，", "len()", "函数就计算字节数：", "\n", ">>> len(b'ABC')\n3\n>>> len(b'\\xe4\\xb8\\xad\\xe6\\x96\\x87')\n6\n>>> len('中文'.encode('utf-8'))\n6\n", "可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。", "\n", "在操作字符串时，我们经常遇到", "str", "和", "bytes", "的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对", "str", "和", "bytes", "进行转换。", "\n", "由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：", "\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n", "第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；", "\n", "第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。", "\n", "申明了UTF-8编码并不意味着你的", ".py", "文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：", "\n", "\n", "如果", ".py", "文件本身使用UTF-8编码，并且也申明了", "# -*- coding: utf-8 -*-", "，打开命令提示符测试就可以正常显示中文：", "\n", "\n", "格式化", "\n", "最后一个常见的问题是如何输出格式化的字符串。我们经常会输出类似", "'亲爱的xxx你好！你xx月的话费是xx，余额是xx'", "之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。", "\n", "\n", "在Python中，采用的格式化方式和C语言是一致的，用", "%", "实现，举例如下：", "\n", ">>> 'Hello, %s' % 'world'\n'Hello, world'\n>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)\n'Hi, Michael, you have $1000000.'\n", "你可能猜到了，", "%", "运算符就是用来格式化字符串的。在字符串内部，", "%s", "表示用字符串替换，", "%d", "表示用整数替换，有几个", "%?", "占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个", "%?", "，括号可以省略。", "\n", "常见的占位符有：", "\n", "\n", "%d", "整数", "\n", "%f", "浮点数", "\n", "%s", "字符串", "\n", "%x", "十六进制整数", "\n", "\n\n", "其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：", "\n", ">>> '%2d-%02d' % (3, 1)\n' 3-01'\n>>> '%.2f' % 3.1415926\n'3.14'\n", "如果你不太确定应该用什么，", "%s", "永远起作用，它会把任何数据类型转换为字符串：", "\n", ">>> 'Age: %s. Gender: %s' % (25, True)\n'Age: 25. Gender: True'\n", "有些时候，字符串里面的", "%", "是一个普通字符怎么办？这个时候就需要转义，用", "%%", "来表示一个", "%", "：", "\n", ">>> 'growth rate: %d %%' % 7\n'growth rate: 7 %'\n", "练习", "\n", "小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出", "'xx.x%'", "，只保留小数点后1位：", "\n", "\n# -*- coding: utf-8 -*-\n\ns1 = 72\ns2 = 85\n----\nr = ???\nprint('???' % r)\n", "\n\n", "小结", "\n", "Python 3的字符串使用Unicode，直接支持多语言。", "\n", "str和bytes互相转换时，需要指定编码。最常用的编码是UTF-8。Python当然也支持其他编码方式，比如把Unicode编码成GB2312：", "\n", ">>> '中文'.encode('gb2312')\n'\\xd6\\xd0\\xce\\xc4'\n", "但这种方式纯属自找麻烦，如果没有特殊业务要求，请牢记仅使用UTF-8编码。", "\n", "格式化字符串的时候，可以用Python的交互式命令行测试，方便快捷。", "\n", "参考源码", "\n", "the_string.py", "\n\n    "]}
{"title": ["数据类型和变量"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658624177ea4f8fcb06bc4d0e8aab2fd7aa65dd95000", "desc": ["\n        ", "数据类型", "\n", "计算机顾名思义就是可以做数学计算的机器，因此，计算机程序理所当然地可以处理各种数值。但是，计算机能处理的远不止数值，还可以处理文本、图形、音频、视频、网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中，能够直接处理的数据类型有以下几种：", "\n", "整数", "\n", "Python可以处理任意大小的整数，当然包括负整数，在程序中的表示方法和数学上的写法一模一样，例如：", "1", "，", "100", "，", "-8080", "，", "0", "，等等。", "\n", "计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用", "0x", "前缀和0-9，a-f表示，例如：", "0xff00", "，", "0xa5b4c3d2", "，等等。", "\n", "浮点数", "\n", "浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x10", "9", "和12.3x10", "8", "是完全相等的。浮点数可以用数学写法，如", "1.23", "，", "3.14", "，", "-9.01", "，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10", "9", "就是", "1.23e9", "，或者", "12.3e8", "，0.000012可以写成", "1.2e-5", "，等等。", "\n", "整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。", "\n", "字符串", "\n", "字符串是以单引号", "'", "或双引号", "\"", "括起来的任意文本，比如", "'abc'", "，", "\"xyz\"", "等等。请注意，", "''", "或", "\"\"", "本身只是一种表示方式，不是字符串的一部分，因此，字符串", "'abc'", "只有", "a", "，", "b", "，", "c", "这3个字符。如果", "'", "本身也是一个字符，那就可以用", "\"\"", "括起来，比如", "\"I'm OK\"", "包含的字符是", "I", "，", "'", "，", "m", "，空格，", "O", "，", "K", "这6个字符。", "\n", "如果字符串内部既包含", "'", "又包含", "\"", "怎么办？可以用转义字符", "\\", "来标识，比如：", "\n", "'I\\'m \\\"OK\\\"!'\n", "表示的字符串内容是：", "\n", "I'm \"OK\"!\n", "转义字符", "\\", "可以转义很多字符，比如", "\\n", "表示换行，", "\\t", "表示制表符，字符", "\\", "本身也要转义，所以", "\\\\", "表示的字符就是", "\\", "，可以在Python的交互式命令行用", "print()", "打印字符串看看：", "\n", ">>> print('I\\'m ok.')\nI'm ok.\n>>> print('I\\'m learning\\nPython.')\nI'm learning\nPython.\n>>> print('\\\\\\n\\\\')\n\\\n\\\n", "如果字符串里面有很多字符都需要转义，就需要加很多", "\\", "，为了简化，Python还允许用", "r''", "表示", "''", "内部的字符串默认不转义，可以自己试试：", "\n", ">>> print('\\\\\\t\\\\')\n\\       \\\n>>> print(r'\\\\\\t\\\\')\n\\\\\\t\\\\\n", "如果字符串内部有很多换行，用", "\\n", "写在一行里不好阅读，为了简化，Python允许用", "'''...'''", "的格式表示多行内容，可以自己试试：", "\n", ">>> print('''line1\n... line2\n... line3''')\nline1\nline2\nline3\n", "上面是在交互式命令行内输入，注意在输入多行内容时，提示符由", ">>>", "变为", "...", "，提示你可以接着上一行输入。如果写成程序，就是：", "\n", "print('''line1\nline2\nline3''')\n", "多行字符串", "'''...'''", "还可以在前面加上", "r", "使用，请自行测试。", "\n", "布尔值", "\n", "布尔值和布尔代数的表示完全一致，一个布尔值只有", "True", "、", "False", "两种值，要么是", "True", "，要么是", "False", "，在Python中，可以直接用", "True", "、", "False", "表示布尔值（请注意大小写），也可以通过布尔运算计算出来：", "\n", ">>> True\nTrue\n>>> False\nFalse\n>>> 3 > 2\nTrue\n>>> 3 > 5\nFalse\n", "布尔值可以用", "and", "、", "or", "和", "not", "运算。", "\n", "and", "运算是与运算，只有所有都为", "True", "，", "and", "运算结果才是", "True", "：", "\n", ">>> True and True\nTrue\n>>> True and False\nFalse\n>>> False and False\nFalse\n>>> 5 > 3 and 3 > 1\nTrue\n", "or", "运算是或运算，只要其中有一个为", "True", "，", "or", "运算结果就是", "True", "：", "\n", ">>> True or True\nTrue\n>>> True or False\nTrue\n>>> False or False\nFalse\n>>> 5 > 3 or 1 > 3\nTrue\n", "not", "运算是非运算，它是一个单目运算符，把", "True", "变成", "False", "，", "False", "变成", "True", "：", "\n", ">>> not True\nFalse\n>>> not False\nTrue\n>>> not 1 > 2\nTrue\n", "布尔值经常用在条件判断中，比如：", "\n", "if age >= 18:\n    print('adult')\nelse:\n    print('teenager')\n", "空值", "\n", "空值是Python里一个特殊的值，用", "None", "表示。", "None", "不能理解为", "0", "，因为", "0", "是有意义的，而", "None", "是一个特殊的空值。", "\n", "此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型，我们后面会继续讲到。", "\n", "变量", "\n", "变量的概念基本上和初中代数的方程变量是一致的，只是在计算机程序中，变量不仅可以是数字，还可以是任意数据类型。", "\n", "变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和", "_", "的组合，且不能用数字开头，比如：", "\n", "a = 1\n", "变量", "a", "是一个整数。", "\n", "t_007 = 'T007'\n", "变量", "t_007", "是一个字符串。", "\n", "Answer = True\n", "变量", "Answer", "是一个布尔值", "True", "。", "\n", "在Python中，等号", "=", "是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：", "\n", "a = 123 # a是整数\nprint(a)\na = 'ABC' # a变为字符串\nprint(a)\n", "这种变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。例如Java是静态语言，赋值语句如下（// 表示注释）：", "\n", "int a = 123; // a是整数类型变量\na = \"ABC\"; // 错误：不能把字符串赋给整型变量\n", "和静态语言相比，动态语言更灵活，就是这个原因。", "\n", "请不要把赋值语句的等号等同于数学的等号。比如下面的代码：", "\n", "x = 10\nx = x + 2\n", "如果从数学上理解", "x = x + 2", "那无论如何是不成立的，在程序中，赋值语句先计算右侧的表达式", "x + 2", "，得到结果", "12", "，再赋给变量", "x", "。由于", "x", "之前的值是", "10", "，重新赋值后，", "x", "的值变成", "12", "。", "\n", "最后，理解变量在计算机内存中的表示也非常重要。当我们写：", "\n", "a = 'ABC'\n", "时，Python解释器干了两件事情：", "\n", "\n", "在内存中创建了一个", "'ABC'", "的字符串；", "\n", "\n", "在内存中创建了一个名为", "a", "的变量，并把它指向", "'ABC'", "。", "\n", "\n", "\n", "也可以把一个变量", "a", "赋值给另一个变量", "b", "，这个操作实际上是把变量", "b", "指向变量", "a", "所指向的数据，例如下面的代码：", "\n", "a = 'ABC'\nb = a\na = 'XYZ'\nprint(b)\n", "最后一行打印出变量", "b", "的内容到底是", "'ABC'", "呢还是", "'XYZ'", "？如果从数学意义上理解，就会错误地得出", "b", "和", "a", "相同，也应该是", "'XYZ'", "，但实际上", "b", "的值是", "'ABC'", "，让我们一行一行地执行代码，就可以看到到底发生了什么事：", "\n", "执行", "a = 'ABC'", "，解释器创建了字符串", "'ABC'", "和变量", "a", "，并把", "a", "指向", "'ABC'", "：", "\n", "\n", "执行", "b = a", "，解释器创建了变量", "b", "，并把", "b", "指向", "a", "指向的字符串", "'ABC'", "：", "\n", "\n", "执行", "a = 'XYZ'", "，解释器创建了字符串'XYZ'，并把", "a", "的指向改为", "'XYZ'", "，但", "b", "并没有更改：", "\n", "\n", "所以，最后打印变量", "b", "的结果自然是", "'ABC'", "了。", "\n", "常量", "\n", "所谓常量就是不能变的变量，比如常用的数学常数π就是一个常量。在Python中，通常用全部大写的变量名表示常量：", "\n", "PI = 3.14159265359\n", "但事实上", "PI", "仍然是一个变量，Python根本没有任何机制保证", "PI", "不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，如果你一定要改变变量", "PI", "的值，也没人能拦住你。", "\n", "最后解释一下整数的除法为什么也是精确的。在Python中，有两种除法，一种除法是", "/", "：", "\n", ">>> 10 / 3\n3.3333333333333335\n", "/", "除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数：", "\n", ">>> 9 / 3\n3.0\n", "还有一种除法是", "//", "，称为地板除，两个整数的除法仍然是整数：", "\n", ">>> 10 // 3\n3\n", "你没有看错，整数的地板除", "//", "永远是整数，即使除不尽。要做精确的除法，使用", "/", "就可以。", "\n", "因为", "//", "除法只取结果的整数部分，所以Python还提供一个余数运算，可以得到两个整数相除的余数：", "\n", ">>> 10 % 3\n1\n", "无论整数做", "//", "除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。", "\n", "练习", "\n", "请打印出以下变量的值：", "\n", "\nn = 123\nf = 456.789\ns1 = 'Hello, world'\ns2 = 'Hello, \\'Adam\\''\ns3 = r'Hello, \"Bart\"'\ns4 = r'''Hello,\nLisa!'''\n", "\n\n", "小结", "\n", "Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个“对象”，而变量就是在程序中用来指向这些数据对象的，对变量赋值就是把数据和变量给关联起来。", "\n", "注意：Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，例如Java对32位整数的范围限制在", "-2147483648", "-", "2147483647", "。", "\n", "Python的浮点数也没有大小限制，但是超出一定范围就直接表示为", "inf", "（无限大）。", "\n\n    "]}
{"title": ["Python基础"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431658427513eef3d9dd9f7c48599116735806328e81000", "desc": ["\n        ", "Python是一种计算机编程语言。计算机编程语言和我们日常使用的自然语言有所不同，最大的区别就是，自然语言在不同的语境下有不同的理解，而计算机要根据编程语言执行任务，就必须保证编程语言写出的程序决不能有歧义，所以，任何一种编程语言都有自己的一套语法，编译器或者解释器就是负责把符合语法的程序代码转换成CPU能够执行的机器码，然后执行。Python也不例外。", "\n", "Python的语法比较简单，采用缩进方式，写出来的代码就像下面的样子：", "\n", "# print absolute value of an integer:\na = 100\nif a >= 0:\n    print(a)\nelse:\n    print(-a)\n", "以", "#", "开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。其他每一行都是一个语句，当语句以冒号", ":", "结尾时，缩进的语句视为代码块。", "\n", "缩进有利有弊。好处是强迫你写出格式化的代码，但没有规定缩进是几个空格还是Tab。按照约定俗成的管理，应该始终坚持使用", "4个空格", "的缩进。", "\n", "缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆分成若干函数，从而得到缩进较少的代码。", "\n", "缩进的坏处就是“复制－粘贴”功能失效了，这是最坑爹的地方。当你重构代码时，粘贴过去的代码必须重新检查缩进是否正确。此外，IDE很难像格式化Java代码那样格式化Python代码。", "\n", "最后，请务必注意，Python程序是", "大小写敏感", "的，如果写错了大小写，程序会报错。", "\n", "小结", "\n", "Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。", "\n", "在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。", "\n\n    "]}
{"title": ["期末总结"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014323396477522f8ff26917934f53b49559ab4dc5eab2000", "desc": ["\n        ", "终于到了期末总结的时刻了！", "\n", "经过一段时间的学习，相信你对Python已经初步掌握。一开始，可能觉得Python上手很容易，可是越往后学，会越困难，有的时候，发现理解不了代码，这时，不妨停下来思考一下，先把概念搞清楚，代码自然就明白了。", "\n", "Python非常适合初学者用来进入计算机编程领域。Python属于非常高级的语言，掌握了这门高级语言，就对计算机编程的核心思想——抽象有了初步理解。如果希望继续深入学习计算机编程，可以学习C、JavaScript、Lisp等不同类型的语言，只有多掌握不同领域的语言，有比较才更有收获。", "\n", "\n\n    "]}
{"title": ["FAQ"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/00143278155868605a65e244e6642dfa533753e6338ab5b000", "desc": ["\n        ", "常见问题", "\n", "本节列出常见的一些问题。", "\n", "如何获取当前路径", "\n", "当前路径可以用", "'.'", "表示，再用", "os.path.abspath()", "将其转换为绝对路径：", "\n", "# -*- coding:utf-8 -*-\n# test.py\n\nimport os\n\nprint(os.path.abspath('.'))\n", "运行结果：", "\n", "$ python3 test.py \n/Users/michael/workspace/testing\n", "如何获取当前模块的文件名", "\n", "可以通过特殊变量", "__file__", "获取：", "\n", "# -*- coding:utf-8 -*-\n# test.py\n\nprint(__file__)\n", "输出：", "\n", "$ python3 test.py\ntest.py\n", "如何获取命令行参数", "\n", "可以通过", "sys", "模块的", "argv", "获取：", "\n", "# -*- coding:utf-8 -*-\n# test.py\n\nimport sys\n\nprint(sys.argv)\n", "输出：", "\n", "$ python3 test.py -a -s \"Hello world\"\n['test.py', '-a', '-s', 'Hello world']\n", "argv", "的第一个元素永远是命令行执行的", ".py", "文件名。", "\n", "如何获取当前Python命令的可执行文件路径", "\n", "sys", "模块的", "executable", "变量就是Python命令可执行文件的路径：", "\n", "# -*- coding:utf-8 -*-\n# test.py\n\nimport sys\n\nprint(sys.executable)\n", "在Mac下的结果：", "\n", "$ python3 test.py \n/usr/local/opt/python3/bin/python3.4\n", "\n    "]}
{"title": ["Day 16 - 编写移动App"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432339330096121ae7e38be44570b7fbd0d8faae26f6000", "desc": ["\n        ", "网站部署上线后，还缺点啥呢？", "\n", "在移动互联网浪潮席卷而来的今天，一个网站没有上线移动App，出门根本不好意思跟人打招呼。", "\n", "所以，", "awesome-python3-webapp", "必须得有一个移动App版本！", "\n", "开发iPhone版本", "\n", "我们首先来看看如何开发iPhone App。前置条件：一台Mac电脑，安装XCode和最新的iOS SDK。", "\n", "在使用MVVM编写前端页面时，我们就能感受到，用REST API封装网站后台的功能，不但能清晰地分离前端页面和后台逻辑，现在这个好处更加明显，移动App也可以通过REST API从后端拿到数据。", "\n", "我们来设计一个简化版的iPhone App，包含两个屏幕：列出最新日志和阅读日志的详细内容：", "\n", "\n", "只需要调用API：", "/api/blogs", "。", "\n", "在XCode中完成App编写：", "\n", "\n", "由于我们的教程是Python，关于如何开发iOS，请移步", "Develop Apps for iOS", "。", "\n", "点击下载iOS App源码", "。", "\n", "如何编写Android App？这个当成作业了。", "\n", "参考源码", "\n", "day-16", "\n\n    "]}
{"title": ["Day 15 - 部署Web App"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014323392805925d5b69ddad514511bf0391fe2a0df2b0000", "desc": ["\n        ", "作为一个合格的开发者，在本地环境下完成开发还远远不够，我们需要把Web App部署到远程服务器上，这样，广大用户才能访问到网站。", "\n", "很多做开发的同学把部署这件事情看成是运维同学的工作，这种看法是完全错误的。首先，最近流行", "DevOps", "理念，就是说，开发和运维要变成一个整体。其次，运维的难度，其实跟开发质量有很大的关系。代码写得垃圾，运维再好也架不住天天挂掉。最后，DevOps理念需要把运维、监控等功能融入到开发中。你想服务器升级时不中断用户服务？那就得在开发时考虑到这一点。", "\n", "下面，我们就来把awesome-python3-webapp部署到Linux服务器。", "\n", "搭建Linux服务器", "\n", "要部署到Linux，首先得有一台Linux服务器。要在公网上体验的同学，可以在Amazon的", "AWS", "申请一台EC2虚拟机（免费使用1年），或者使用国内的一些云服务器，一般都提供Ubuntu Server的镜像。想在本地部署的同学，请安装虚拟机，推荐使用", "VirtualBox", "。", "\n", "我们选择的Linux服务器版本是", "Ubuntu Server 14.04 LTS", "，原因是apt太简单了。如果你准备使用其他Linux版本，也没有问题。", "\n", "Linux安装完成后，请确保ssh服务正在运行，否则，需要通过apt安装：", "\n", "$ sudo apt-get install openssh-server\n", "有了ssh服务，就可以从本地连接到服务器上。建议把公钥复制到服务器端用户的", ".ssh/authorized_keys", "中，这样，就可以通过证书实现无密码连接。", "\n", "部署方式", "\n", "利用Python自带的asyncio，我们已经编写了一个异步高性能服务器。但是，我们还需要一个高性能的Web服务器，这里选择Nginx，它可以处理静态资源，同时作为反向代理把动态请求交给Python代码处理。这个模型如下：", "\n", "\n", "Nginx负责分发请求：", "\n", "\n", "在服务器端，我们需要定义好部署的目录结构：", "\n", "/\n+- srv/\n   +- awesome/       <-- Web App根目录\n      +- www/        <-- 存放Python源码\n      |  +- static/  <-- 存放静态资源文件\n      +- log/        <-- 存放log\n", "在服务器上部署，要考虑到新版本如果运行不正常，需要回退到旧版本时怎么办。每次用新的代码覆盖掉旧的文件是不行的，需要一个类似版本控制的机制。由于Linux系统提供了软链接功能，所以，我们把", "www", "作为一个软链接，它指向哪个目录，哪个目录就是当前运行的版本：", "\n", "\n", "而Nginx和gunicorn的配置文件只需要指向", "www", "目录即可。", "\n", "Nginx可以作为服务进程直接启动，但gunicorn还不行，所以，", "Supervisor", "登场！Supervisor是一个管理进程的工具，可以随系统启动而启动服务，它还时刻监控服务进程，如果服务进程意外退出，Supervisor可以自动重启服务。", "\n", "总结一下我们需要用到的服务有：", "\n", "\n", "Nginx：高性能Web服务器+负责反向代理；", "\n", "\n", "Supervisor：监控服务进程的工具；", "\n", "\n", "MySQL：数据库服务。", "\n", "\n", "\n", "在Linux服务器上用apt可以直接安装上述服务：", "\n", "$ sudo apt-get install nginx supervisor python3 mysql-server\n", "然后，再把我们自己的Web App用到的Python库安装了：", "\n", "$ sudo pip3 install jinja2 aiomysql aiohttp\n", "在服务器上创建目录", "/srv/awesome/", "以及相应的子目录。", "\n", "在服务器上初始化MySQL数据库，把数据库初始化脚本", "schema.sql", "复制到服务器上执行：", "\n", "$ mysql -u root -p < schema.sql\n", "服务器端准备就绪。", "\n", "部署", "\n", "用FTP还是SCP还是rsync复制文件？如果你需要手动复制，用一次两次还行，一天如果部署50次不但慢、效率低，而且容易出错。", "\n", "正确的部署方式是使用工具配合脚本完成自动化部署。", "Fabric", "就是一个自动化部署工具。由于Fabric是用Python 2.x开发的，所以，部署脚本要用Python 2.7来编写，本机还必须安装Python 2.7版本。", "\n", "要用Fabric部署，需要在本机（是开发机器，不是Linux服务器）安装Fabric：", "\n", "$ easy_install fabric\n", "Linux服务器上不需要安装Fabric，Fabric使用SSH直接登录服务器并执行部署命令。", "\n", "下一步是编写部署脚本。Fabric的部署脚本叫", "fabfile.py", "，我们把它放到", "awesome-python-webapp", "的目录下，与", "www", "目录平级：", "\n", "awesome-python-webapp/\n+- fabfile.py\n+- www/\n+- ...\n", "Fabric的脚本编写很简单，首先导入Fabric的API，设置部署时的变量：", "\n", "# fabfile.py\nimport os, re\nfrom datetime import datetime\n\n# 导入Fabric API:\nfrom fabric.api import *\n\n# 服务器登录用户名:\nenv.user = 'michael'\n# sudo用户为root:\nenv.sudo_user = 'root'\n# 服务器地址，可以有多个，依次部署:\nenv.hosts = ['192.168.0.3']\n\n# 服务器MySQL用户名和口令:\ndb_user = 'www-data'\ndb_password = 'www-data'\n", "然后，每个Python函数都是一个任务。我们先编写一个打包的任务：", "\n", "_TAR_FILE = 'dist-awesome.tar.gz'\n\ndef build():\n    includes = ['static', 'templates', 'transwarp', 'favicon.ico', '*.py']\n    excludes = ['test', '.*', '*.pyc', '*.pyo']\n    local('rm -f dist/%s' % _TAR_FILE)\n    with lcd(os.path.join(os.path.abspath('.'), 'www')):\n        cmd = ['tar', '--dereference', '-czvf', '../dist/%s' % _TAR_FILE]\n        cmd.extend(['--exclude=\\'%s\\'' % ex for ex in excludes])\n        cmd.extend(includes)\n        local(' '.join(cmd))\n", "Fabric提供", "local('...')", "来运行本地命令，", "with lcd(path)", "可以把当前命令的目录设定为", "lcd()", "指定的目录，注意Fabric只能运行命令行命令，Windows下可能需要", "Cgywin", "环境。", "\n", "在", "awesome-python-webapp", "目录下运行：", "\n", "$ fab build\n", "看看是否在", "dist", "目录下创建了", "dist-awesome.tar.gz", "的文件。", "\n", "打包后，我们就可以继续编写", "deploy", "任务，把打包文件上传至服务器，解压，重置", "www", "软链接，重启相关服务：", "\n", "_REMOTE_TMP_TAR = '/tmp/%s' % _TAR_FILE\n_REMOTE_BASE_DIR = '/srv/awesome'\n\ndef deploy():\n    newdir = 'www-%s' % datetime.now().strftime('%y-%m-%d_%H.%M.%S')\n    # 删除已有的tar文件:\n    run('rm -f %s' % _REMOTE_TMP_TAR)\n    # 上传新的tar文件:\n    put('dist/%s' % _TAR_FILE, _REMOTE_TMP_TAR)\n    # 创建新目录:\n    with cd(_REMOTE_BASE_DIR):\n        sudo('mkdir %s' % newdir)\n    # 解压到新目录:\n    with cd('%s/%s' % (_REMOTE_BASE_DIR, newdir)):\n        sudo('tar -xzvf %s' % _REMOTE_TMP_TAR)\n    # 重置软链接:\n    with cd(_REMOTE_BASE_DIR):\n        sudo('rm -f www')\n        sudo('ln -s %s www' % newdir)\n        sudo('chown www-data:www-data www')\n        sudo('chown -R www-data:www-data %s' % newdir)\n    # 重启Python服务和nginx服务器:\n    with settings(warn_only=True):\n        sudo('supervisorctl stop awesome')\n        sudo('supervisorctl start awesome')\n        sudo('/etc/init.d/nginx reload')\n", "注意", "run()", "函数执行的命令是在服务器上运行，", "with cd(path)", "和", "with lcd(path)", "类似，把当前目录在服务器端设置为", "cd()", "指定的目录。如果一个命令需要sudo权限，就不能用", "run()", "，而是用", "sudo()", "来执行。", "\n", "配置Supervisor", "\n", "上面让Supervisor重启awesome的命令会失败，因为我们还没有配置Supervisor呢。", "\n", "编写一个Supervisor的配置文件", "awesome.conf", "，存放到", "/etc/supervisor/conf.d/", "目录下：", "\n", "[program:awesome]\n\ncommand     = /srv/awesome/www/app.py\ndirectory   = /srv/awesome/www\nuser        = www-data\nstartsecs   = 3\n\nredirect_stderr         = true\nstdout_logfile_maxbytes = 50MB\nstdout_logfile_backups  = 10\nstdout_logfile          = /srv/awesome/log/app.log\n", "配置文件通过", "[program:awesome]", "指定服务名为", "awesome", "，", "command", "指定启动", "app.py", "。", "\n", "然后重启Supervisor后，就可以随时启动和停止Supervisor管理的服务了：", "\n", "$ sudo supervisorctl reload\n$ sudo supervisorctl start awesome\n$ sudo supervisorctl status\nawesome                RUNNING    pid 1401, uptime 5:01:34\n", "配置Nginx", "\n", "Supervisor只负责运行gunicorn，我们还需要配置Nginx。把配置文件", "awesome", "放到", "/etc/nginx/sites-available/", "目录下：", "\n", "server {\n    listen      80; # 监听80端口\n\n    root       /srv/awesome/www;\n    access_log /srv/awesome/log/access_log;\n    error_log  /srv/awesome/log/error_log;\n\n    # server_name awesome.liaoxuefeng.com; # 配置域名\n\n    # 处理静态文件/favicon.ico:\n    location /favicon.ico {\n        root /srv/awesome/www;\n    }\n\n    # 处理静态资源:\n    location ~ ^\\/static\\/.*$ {\n        root /srv/awesome/www;\n    }\n\n    # 动态请求转发到9000端口:\n    location / {\n        proxy_pass       http://127.0.0.1:9000;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $host;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n", "然后在", "/etc/nginx/sites-enabled/", "目录下创建软链接：", "\n", "$ pwd\n/etc/nginx/sites-enabled\n$ sudo ln -s /etc/nginx/sites-available/awesome .\n", "让Nginx重新加载配置文件，不出意外，我们的", "awesome-python3-webapp", "应该正常运行：", "\n", "$ sudo /etc/init.d/nginx reload\n", "如果有任何错误，都可以在", "/srv/awesome/log", "下查找Nginx和App本身的log。如果Supervisor启动时报错，可以在", "/var/log/supervisor", "下查看Supervisor的log。", "\n", "如果一切顺利，你可以在浏览器中访问Linux服务器上的", "awesome-python3-webapp", "了：", "\n", "\n", "如果在开发环境更新了代码，只需要在命令行执行：", "\n", "$ fab build\n$ fab deploy\n", "自动部署完成！刷新浏览器就可以看到服务器代码更新后的效果。", "\n", "友情链接", "\n", "嫌国外网速慢的童鞋请移步网易和搜狐的镜像站点：", "\n", "http://mirrors.163.com/", "\n", "http://mirrors.sohu.com/", "\n", "参考源码", "\n", "day-15", "\n\n    "]}
{"title": ["Day 14 - 完成Web App"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432339247097eea476bf61f8496092cc1b663eae1848000", "desc": ["\n        ", "在Web App框架和基本流程跑通后，剩下的工作全部是体力活了：在Debug开发模式下完成后端所有API、前端所有页面。我们需要做的事情包括：", "\n", "把当前用户绑定到", "request", "上，并对URL", "/manage/", "进行拦截，检查当前用户是否是管理员身份：", "\n", "@asyncio.coroutine\ndef auth_factory(app, handler):\n    @asyncio.coroutine\n    def auth(request):\n        logging.info('check user: %s %s' % (request.method, request.path))\n        request.__user__ = None\n        cookie_str = request.cookies.get(COOKIE_NAME)\n        if cookie_str:\n            user = yield from cookie2user(cookie_str)\n            if user:\n                logging.info('set current user: %s' % user.email)\n                request.__user__ = user\n        if request.path.startswith('/manage/') and (request.__user__ is None or not request.__user__.admin):\n            return web.HTTPFound('/signin')\n        return (yield from handler(request))\n    return auth\n", "后端API包括：", "\n", "\n", "获取日志：GET /api/blogs", "\n", "\n", "创建日志：POST /api/blogs", "\n", "\n", "修改日志：POST /api/blogs/:blog_id", "\n", "\n", "删除日志：POST /api/blogs/:blog_id/delete", "\n", "\n", "获取评论：GET /api/comments", "\n", "\n", "创建评论：POST /api/blogs/:blog_id/comments", "\n", "\n", "删除评论：POST /api/comments/:comment_id/delete", "\n", "\n", "创建新用户：POST /api/users", "\n", "\n", "获取用户：GET /api/users", "\n", "\n", "\n", "管理页面包括：", "\n", "\n", "评论列表页：GET /manage/comments", "\n", "\n", "日志列表页：GET /manage/blogs", "\n", "\n", "创建日志页：GET /manage/blogs/create", "\n", "\n", "修改日志页：GET /manage/blogs/", "\n", "\n", "用户列表页：GET /manage/users", "\n", "\n", "\n", "用户浏览页面包括：", "\n", "\n", "注册页：GET /register", "\n", "\n", "登录页：GET /signin", "\n", "\n", "注销页：GET /signout", "\n", "\n", "首页：GET /", "\n", "\n", "日志详情页：GET /blog/:blog_id", "\n", "\n", "\n", "把所有的功能实现，我们第一个Web App就宣告完成！", "\n", "参考源码", "\n", "day-14", "\n\n    "]}
{"title": ["Day 13 - 提升开发效率"], "link": "http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001432339228196a8eb6fb8832b48b5aa0d740346536ead000", "desc": ["\n        ", "现在，我们已经把一个Web App的框架完全搭建好了，从后端的API到前端的MVVM，流程已经跑通了。", "\n", "在继续工作前，注意到每次修改Python代码，都必须在命令行先Ctrl-C停止服务器，再重启，改动才能生效。", "\n", "在开发阶段，每天都要修改、保存几十次代码，每次保存都手动来这么一下非常麻烦，严重地降低了我们的开发效率。有没有办法让服务器检测到代码修改后自动重新加载呢？", "\n", "Django的开发环境在Debug模式下就可以做到自动重新加载，如果我们编写的服务器也能实现这个功能，就能大大提升开发效率。", "\n", "可惜的是，Django没把这个功能独立出来，不用Django就享受不到，怎么办？", "\n", "其实Python本身提供了重新载入模块的功能，但不是所有模块都能被重新载入。另一种思路是检测", "www", "目录下的代码改动，一旦有改动，就自动重启服务器。", "\n", "按照这个思路，我们可以编写一个辅助程序", "pymonitor.py", "，让它启动", "wsgiapp.py", "，并时刻监控", "www", "目录下的代码改动，有改动时，先把当前", "wsgiapp.py", "进程杀掉，再重启，就完成了服务器进程的自动重启。", "\n", "要监控目录文件的变化，我们也无需自己手动定时扫描，Python的第三方库", "watchdog", "可以利用操作系统的API来监控目录文件的变化，并发送通知。我们先用", "pip", "安装：", "\n", "$ pip3 install watchdog\n", "利用", "watchdog", "接收文件变化的通知，如果是", ".py", "文件，就自动重启", "wsgiapp.py", "进程。", "\n", "利用Python自带的", "subprocess", "实现进程的启动和终止，并把输入输出重定向到当前进程的输入输出中：", "\n", "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\n__author__ = 'Michael Liao'\n\nimport os, sys, time, subprocess\n\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\ndef log(s):\n    print('[Monitor] %s' % s)\n\nclass MyFileSystemEventHander(FileSystemEventHandler):\n\n    def __init__(self, fn):\n        super(MyFileSystemEventHander, self).__init__()\n        self.restart = fn\n\n    def on_any_event(self, event):\n        if event.src_path.endswith('.py'):\n            log('Python source file changed: %s' % event.src_path)\n            self.restart()\n\ncommand = ['echo', 'ok']\nprocess = None\n\ndef kill_process():\n    global process\n    if process:\n        log('Kill process [%s]...' % process.pid)\n        process.kill()\n        process.wait()\n        log('Process ended with code %s.' % process.returncode)\n        process = None\n\ndef start_process():\n    global process, command\n    log('Start process %s...' % ' '.join(command))\n    process = subprocess.Popen(command, stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr)\n\ndef restart_process():\n    kill_process()\n    start_process()\n\ndef start_watch(path, callback):\n    observer = Observer()\n    observer.schedule(MyFileSystemEventHander(restart_process), path, recursive=True)\n    observer.start()\n    log('Watching directory %s...' % path)\n    start_process()\n    try:\n        while True:\n            time.sleep(0.5)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == '__main__':\n    argv = sys.argv[1:]\n    if not argv:\n        print('Usage: ./pymonitor your-script.py')\n        exit(0)\n    if argv[0] != 'python3':\n        argv.insert(0, 'python3')\n    command = argv\n    path = os.path.abspath('.')\n    start_watch(path, None)\n", "一共70行左右的代码，就实现了Debug模式的自动重新加载。用下面的命令启动服务器：", "\n", "$ python3 pymonitor.py wsgiapp.py\n", "或者给", "pymonitor.py", "加上可执行权限，启动服务器：", "\n", "$ ./pymonitor.py app.py\n", "在编辑器中打开一个", ".py", "文件，修改后保存，看看命令行输出，是不是自动重启了服务器：", "\n", "$ ./pymonitor.py app.py \n[Monitor] Watching directory /Users/michael/Github/awesome-python3-webapp/www...\n[Monitor] Start process python app.py...\n...\nINFO:root:application (/Users/michael/Github/awesome-python3-webapp/www) will start at 0.0.0.0:9000...\n[Monitor] Python source file changed: /Users/michael/Github/awesome-python-webapp/www/handlers.py\n[Monitor] Kill process [2747]...\n[Monitor] Process ended with code -9.\n[Monitor] Start process python app.py...\n...\nINFO:root:application (/Users/michael/Github/awesome-python3-webapp/www) will start at 0.0.0.0:9000...\n", "现在，只要一保存代码，就可以刷新浏览器看到效果，大大提升了开发效率。", "\n\n    "]}
